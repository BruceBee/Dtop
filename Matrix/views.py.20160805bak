# -*- coding: utf-8 -*-

from django.shortcuts import HttpResponse,render_to_response,HttpResponseRedirect,render
from django.template import RequestContext
from django.template.context_processors import csrf
from django.contrib.auth.decorators import login_required,permission_required
from django.contrib.auth import authenticate, login as auth_login
from django.contrib.auth.models import User
from django.db.models import Q
from django.views.decorators.csrf import csrf_exempt,ensure_csrf_cookie
from django.views.decorators.cache import never_cache
from django.views.decorators.http import require_http_methods,require_POST,require_GET
import os,sys,commands,subprocess,re,zipfile,shutil,statvfs,MySQLdb as mdb,json,chardet
import difflib,datetime,time,threading,urllib2,json,string
from datetime import date
from django.views.generic import TemplateView
from django import forms
from forms import DnsForm
from qiniu import Auth, put_data, put_file
from django.http import StreamingHttpResponse
from random import *
from Matrix import models
from django.core import serializers
import re
##################################################################################

reload(sys)
sys.setdefaultencoding('utf-8')

class UploadFileForm(forms.Form):
    title = forms.CharField(max_length=1000000)
    file = forms.FileField()

def favicon(request):
    return HttpResponseRedirect('/images/favicon.ico')

def login(request):
    if not request.user.is_authenticated():
        return render_to_response('auth.html',context_instance=RequestContext(request))
    else:
        return HttpResponseRedirect('home/dashboard.html')

def Vre(string):
    return str(string).strip().replace('&','&amp;').replace('>','&gt;').replace('<','&lt;').replace('"','&quot;').replace('\n','\r\n')

def get_client_ip(request):
    try:
        real_ip = request.META['HTTP_X_FORWARDED_FOR']
        regip = real_ip.split(",")[0]
    except:
        try:
            regip = request.META['REMOTE_ADDR']
        except:
            regip = ""
    return regip


class CJsonEncoder(json.JSONEncoder):  
    def default(self, obj):  
        if isinstance(obj, datetime.datetime):  
            return obj.strftime('%Y-%m-%d %H:%M:%S')  
        elif isinstance(obj, date):  
            return obj.strftime("%Y-%m-%d")  
        else:  
            return json.JSONEncoder.default(self, obj)  

@never_cache
@require_POST
def auth(request):
    print get_client_ip(request)
    x_message="您的请求已被拦截01！"
    request.session['x_message']=x_message
    if request.method == 'POST':
        username = Vre(request.POST.get('username', ''))
        password = Vre(request.POST.get('password', ''))
        uname = Vre(request.POST.get('uname', ''))
        tname = Vre(request.POST.get('tname', ''))
        if (not username or not password) and (not uname or not tname):
            return HttpResponse(x_message)
        else:
            try:#本地库验证
                if username and password:
                    u=User.objects.get(username__exact=username)
                elif uname and tname:#重置密码
                    try:
                        u=User.objects.get(Q(username__exact=uname),Q(first_name__exact=tname))
                        try:
                            characters=string.ascii_letters + string.digits
                            password="".join(choice(characters) for x in range(randint(6, 6)))
                            u.set_password(password)
                            u.save()
                            return HttpResponseRedirect('auth.html?error=N')
                        except:
                            return HttpResponseRedirect('auth.html?error=v')
                    except:
                        return HttpResponseRedirect('auth.html?error=v')

                user = authenticate(username=username, password=password)
                if user is not None:
                    if user.is_active:
                        auth_login(request, user)
                        request.session.set_expiry(28800)
                    else:
                        return HttpResponseRedirect('auth.html?error=Y')
                else:
                    return HttpResponseRedirect('auth.html?error=V')
            except:
                return HttpResponseRedirect('auth.html?error=V')

            if request.user.is_authenticated():
                try:
                    if password.isdigit() and len(password) <= 6:
                        redirect_to='V/password_change/'
                    else:
                        redirect_to=request.META.get('HTTP_REFERER', False).lstrip('/').strip().split('next')[1].split('=')[1]
                except:
                    redirect_to='home/dashboard.html'
                return HttpResponseRedirect(redirect_to)
            else:
                return HttpResponseRedirect('/')
    else:
        return HttpResponse(x_message)

@login_required
@require_GET
def index(request):
    print get_client_ip(request)
    global Size,Used,Percent,apps,appname,appgroup,true_name,last_login,base_id
    x_message=request.session.get('x_message',"您的请求已被拦截02！")
    V=request.get_full_path().lstrip('/').strip()
    try:
        if len(V.split('.')) != 2 or V.split('.')[1].split('?')[0] != 'html':return HttpResponse(x_message)
        try:
            base_id=V.split('.')[1].split('?')[1].split('&&')[0].split('=')[1]
        except:
            base_id=''
    except:
        return HttpResponse(x_message)
    vfs=os.statvfs('/')
    Size=vfs[statvfs.F_BLOCKS]*vfs[statvfs.F_BSIZE]/(1024*1024*1024)
    Avail=vfs[statvfs.F_BAVAIL]*vfs[statvfs.F_BSIZE]/(1024*1024*1024)
    Used=Size-Avail
    Percent=int(round(round(float(Used)/Size*100,2)))
    appname=V.split('/')[1].split('.')[0]
    appgroup=V.split('/')[0]
    apps={'dashboard':{'url':'/home/dashboard.html','name':'开始'},
        'baseinfo':{'url':'/info/baseinfo.html','name':'云资源信息'},
        'hostconfig':{'url':'/info/hostconfig.html','name':'主机配置信息'},
        'businessinfo':{'url':'/info/businessinfo.html','name':'业务线配置信息'},
        'platforminfo':{'url':'/info/platforminfo.html','name':'云平台配置信息'},
        'autorelease':{'url':'/auto/autorelease.html','name':'项目发布回滚'},
        'domaininfo':{'url':'/dns/domaininfo.html','name':'域名信息'},
        'dnsinfo':{'url':'/dns/dnsinfo.html','name':'DNS信息'},
        'autodnspod':{'url':'/auto/autodnspod.html','name':'DNS数据同步'},
        }

    if not apps.has_key(appname):return HttpResponse(x_message)

    if not request.user.is_authenticated():
        return HttpResponseRedirect(LOGIN_URL)
    else:
        true_name=request.user.first_name
        if not true_name:true_name='无名氏'
        return render_to_response(V.split('?')[0],{'true_name':true_name,'Used':Used,'Size':Size,'Percent':Percent,'apps':apps,'appname':appname,'appgroup':appgroup},context_instance=RequestContext(request))

@login_required
@require_POST
@permission_required('add_contenttype')
def admin_data(request):
    pass
#     x_message=request.session.get('x_message',"您的请求已被拦截03！")
#     if len(request.get_full_path().lstrip('/').strip().split('/')[1].split('_')) < 2:
#         return HttpResponse(x_message)
#     dbname=request.get_full_path().lstrip('/').strip().split('/')[1].split('_')[0]
#     action=request.get_full_path().lstrip('/').strip().split('/')[1].split('_')[1]

#     if action == 'pagedataList':
#         #判断请求页面再获取相应字段名
#         if dbname == 'baseinfo':
#             tj=Vre(request.POST.get('tj', ''))
#             page=int(request.POST.get('page', '1').encode('latin-1', 'ignore').strip())
#             num=int(request.POST.get('num', '10').encode('latin-1', 'ignore').strip())
#             #构造sql语句
#             if tj == '':
#                 sql_total="SELECT COUNT(1) as 'total' FROM `baseinfo`"
#                 sql_data="SELECT `id`,`hostname`,DATE_FORMAT(`createtime`,'%%Y-%%m-%%d %%H:%%i:%%s') AS 'createtime',case when TIMESTAMPDIFF(DAY,NOW(), `endtime`) < 30 then CONCAT('<font color=red>',DATE_FORMAT(`endtime`,'%%Y-%%m-%%d %%H:%%i:%%s'),'</font>') else DATE_FORMAT(`endtime`,'%%Y-%%m-%%d %%H:%%i:%%s') end AS 'deadline',CONCAT('<a href=\"',`url`,'\" target=\"_blank\">',`isp`,'</a>') AS 'isp',CONCAT('<a href=\"/info/hostconfig.html?base_id=',`id`,'\">',`sid`,'</a>') AS 'sid',case when `status` != '1' then CONCAT('<font color=red>','否','</font>') else '是' end AS 'status' FROM `baseinfo` ORDER BY `endtime` ASC LIMIT "+str((page-1)*num)+","+str(num)
#             else:
#                 sql_total="SELECT COUNT(1) as 'total' FROM `baseinfo` WHERE `isp` LIKE %s OR `url` LIKE %s OR `sid` LIKE %s OR `hostname` LIKE %s"
#                 sql_data="SELECT `id`,`hostname`,DATE_FORMAT(`createtime`,'%%Y-%%m-%%d %%H:%%i:%%s') AS 'createtime',case when TIMESTAMPDIFF(DAY,NOW(), `endtime`) < 30 then CONCAT('<font color=red>',DATE_FORMAT(`endtime`,'%%Y-%%m-%%d %%H:%%i:%%s'),'</font>') else DATE_FORMAT(`endtime`,'%%Y-%%m-%%d %%H:%%i:%%s') end AS 'deadline',CONCAT('<a href=\"',`url`,'\" target=\"_blank\">',`isp`,'</a>') AS 'isp',CONCAT('<a href=\"/info/hostconfig.html?base_id=',`id`,'\">',`sid`,'</a>') AS 'sid',case when `status` != '1' then CONCAT('<font color=red>','否','</font>') else '是' end AS 'status' FROM `baseinfo` WHERE `isp` LIKE %s OR `url` LIKE %s OR `sid` LIKE %s OR `hostname` LIKE %s ORDER BY `endtime` ASC LIMIT "+str((page-1)*num)+","+str(num)
#         elif dbname == 'configinfo':
#             tj=Vre(request.POST.get('tj', ''))
#             page=int(request.POST.get('page', '1').encode('latin-1', 'ignore').strip())
#             num=int(request.POST.get('num', '10').encode('latin-1', 'ignore').strip())
#             #构造sql语句
#             if tj == '':
#                 try:
#                     if base_id:
#                         baserelate="WHERE `base_id` = '"+base_id+"'"
#                     else:
#                         baserelate=""
#                 except:
#                     baserelate=""
#                 sql_total="SELECT COUNT(1) as 'total' FROM `configinfo` "+baserelate
#                 sql_data="SELECT * FROM `configinfo` "+baserelate+" ORDER BY `id` ASC LIMIT "+str((page-1)*num)+","+str(num)
#             else:
#                 sql_total="SELECT COUNT(1) as 'total' FROM `configinfo` WHERE `lip` LIKE %s OR `wip` LIKE %s OR `sys` LIKE %s OR `usage` LIKE %s"
#                 sql_data="SELECT * FROM `configinfo` WHERE `lip` LIKE %s OR `wip` LIKE %s OR `sys` LIKE %s OR `usage` LIKE %s ORDER BY `id` ASC LIMIT "+str((page-1)*num)+","+str(num)
#         else:
#             return HttpResponse(x_message)

#         tj1=[]
#         tj2=[]
#         for i in range(len(re.findall(" %s",sql_total))):
#             tj1.append('%'+tj+'%')
#         for j in range(len(re.findall(" %s",sql_data))):
#             tj2.append('%'+tj+'%')
#         con = mdb.connect('localhost', 'dtop', 'Dt9d54e446', 'dtop')
#         with con:
#             cur = con.cursor(mdb.cursors.DictCursor)
#             cur.execute("set names utf8")
#             print sql_total,tj1
#             cur.execute(sql_total,tj1)
#             total = cur.fetchone()
#             print sql_data,tj2
#             cur.execute(sql_data,tj2)
#             rows = cur.fetchall()
#             cur.close()
#         con.close()
#         data="{\"rows\":"+json.dumps(rows)+",\"total\":\""+str(total['total'])+"\"}"
#         return HttpResponse(data)

#     elif action == 'editFun' and request.user.has_perm('change_contenttype'):
#         #判断请求页面再获取相应字段名
#         ID=Vre(request.POST.get('id', ''))
#         cl2=[]
#         ln=[]
#         if dbname == 'baseinfo':
#             if ID == '':
#                 cl1=['sid','isp','url','hostname','status','createtime','endtime','hostop']
#             else:
#                 cl1=['id','sid','isp','url','hostname','status','createtime','endtime','hostop']
#         elif dbname == 'configinfo':
#             if ID == '':
#                 cl1=['lip','wip','net','cpu','mem','disk','sys','usage','hostop']
#             else:
#                 cl1=['id','lip','wip','net','cpu','mem','disk','sys','usage','hostop']
#         else:
#             return HttpResponse(x_message)
#         #构造sql语句
#         for v in range(len(cl1)):
#             cl2.append(Vre(request.POST.get(cl1[v], '')))
#             ln.append('%s')
#         s1='(`'+'`,`'.join(cl1)+'`)'
#         s2='('+','.join(ln)+')'
#         #区分新增与修改功能
#         values=[]
#         if ID == '':
#             for i in range(len(ln)):
#                 values.append(cl2[i])
#             sql_insert_edit='INSERT INTO `'+dbname+'`'+s1+' VALUES '+s2
#         else:
#             cl3=[]
#             for y in range(len(cl1)):
#                 cl3.append('`'+cl1[y]+'`="'+cl2[y]+'"')
#             s3=','.join(cl3)
#             sql_insert_edit='UPDATE `'+dbname+'` SET '+s3+' WHERE `id`='+str(int(ID))
#         #block
#         con = mdb.connect('localhost', 'dtop', 'Dt9d54e446', 'dtop')
#         with con:
#             cur=con.cursor()
#             try:
#                 cur.execute("set names utf8")
#                 cur.execute(sql_insert_edit.encode('utf8'),values)
#                 con.commit()
#                 result=1
#                 #Vlog('"[success] '+time.strftime("%Y-%m-%d_%H:%M:%S",time.localtime(time.time()))+' '+get_client_ip(request)+' '+request.user.first_name+' 管理系统编辑成功（dbname_values_ID：'+dbname+'_'+'_'.join(values)+'_'+str(ID)+'）"')
#             except:
#                 con.rollback()
#                 result=0
#                 #Vlog('"[error] '+time.strftime("%Y-%m-%d_%H:%M:%S",time.localtime(time.time()))+' '+get_client_ip(request)+' '+request.user.first_name+' 管理系统编辑失败（dbname_values_ID：'+dbname+'_'+'_'.join(values)+'_'+str(ID)+'）"')
#             cur.close()
#         con.close()
#         return HttpResponse(result)

#     elif action == 'deleteFun' and request.user.has_perm('delete_contenttype'):
#         #判断请求页面再获取相应字段名
#         ID=Vre(request.POST.get('id', ''))
#         if dbname == 'baseinfo' or dbname == 'configinfo':
#             if ID == '':
#                 con.close()
#                 return HttpResponse(x_message)
#             else:
#                 ID="".join(ID.split())
#         else:
#             con.close()
#             return HttpResponse(x_message)
#         con = mdb.connect('localhost', 'dtop', 'Dt9d54e446', 'dtop')
#         with con:
#             cur=con.cursor()
#             sql_delete='DELETE FROM `'+dbname+'` WHERE `id` IN ('+str(ID)+')'
#             cur.execute("set names utf8")
#             if cur.execute(sql_delete.encode('utf8')):
#                 result=1
#             else:
#                 result=0
#             cur.close()
#         con.commit()
#         con.close()
#         #Vlog('"[delete] '+time.strftime("%Y-%m-%d_%H:%M:%S",time.localtime(time.time()))+' '+get_client_ip(request)+' '+request.user.first_name+' 管理系统删除记录（dbname_ID：'+dbname+'_'+str(ID)+'）"')
#         return HttpResponse(result)
#     else:
#         #Vlog('"[error] '+time.strftime("%Y-%m-%d_%H:%M:%S",time.localtime(time.time()))+' '+get_client_ip(request)+' '+request.user.first_name+' 管理系统操作失败（action：'+action+'）"')
#         return HttpResponse(x_message)

@login_required
@require_POST
@permission_required('change_contenttype')
def auto_data(request):
    x_message=request.session.get('x_message',"您的请求已被拦截04！")
    if len(request.get_full_path().lstrip('/').strip().split('/')[1].split('_')) < 2:
        return HttpResponse(x_message)
    dbname=request.get_full_path().lstrip('/').strip().split('/')[1].split('_')[0]
    action=request.get_full_path().lstrip('/').strip().split('/')[1].split('_')[1]

    if action == 'putdata':
        if request.method == 'POST':
            f = request.FILES['schid_file']
            file_name = f.name
            f_path='/tmp/'+file_name
        else:
            return HttpResponse(x_message)
        if file_name:
            if os.path.isfile(f_path):
                #urllib2.urlopen(url)
                #Vlog('"[success] '+time.strftime("%Y-%m-%d_%H:%M:%S",time.localtime(time.time()))+' '+get_client_ip(request)+' '+request.user.first_name+' 上传模板已存在（stbname：'+str(f.name)+'）"')
                return HttpResponse("<font color=green>云端已存在此文件，将跳过上传步骤</font>")
            else:
                paths = file_name.split('.')
                if paths[1] == 'zip':
                    if 1:
                        with open(f_path, 'wb+') as info:
                            for chunk in f.chunks():
                                info.write(chunk)

                        ress = '<font color=green>文件 '+file_name+' 已成功上传至云端</font>'
                        #Vlog('"[success] '+time.strftime("%Y-%m-%d_%H:%M:%S",time.localtime(time.time()))+' '+get_client_ip(request)+' '+request.user.first_name+' 上传模板成功（stbname：'+ss+'）"')
                        return HttpResponse(ress)
                    #except:
                    #    res = 0
                        #Vlog('"[error] '+time.strftime("%Y-%m-%d_%H:%M:%S",time.localtime(time.time()))+' '+get_client_ip(request)+' '+request.user.first_name+' 上传模板失败（stbname：'+ss+'）"')
                    #    return HttpResponse(res)
                else:
                    res = 0
                    return HttpResponse(res)
        else:
            return HttpResponse(x_message)
    else:
        return HttpResponse(x_message)


@login_required
def dnsinfo(request):
    domaininfo = models.DomainInfo.objects.all()
    return render(request,'dnsinfo.html',{'domaininfo':domaininfo})
    # return HttpResponse('YES')


@login_required
@require_POST
@permission_required('add_contenttype')
def dns_data(request):
    x_message=request.session.get('x_message',"您的请求已被拦截05！")
    if len(request.get_full_path().lstrip('/').strip().split('/')[1].split('_')) < 2:
        return HttpResponse(x_message)
    dbname=request.get_full_path().lstrip('/').strip().split('/')[1].split('_')[0]
    #dbname可能等于domaininfo,dnsinfo两种，后续还会加上baseinfo，configinfo等
    action=request.get_full_path().lstrip('/').strip().split('/')[1].split('_')[1]
    #action可能等于pagedataList,editFun,deleteFun,sync四种,即增删改查与同步
    if dbname == 'domaininfo':
        if action == 'pagedataList':
            tj=Vre(request.POST.get('tj', ''))
            

            page=int(request.POST.get('page', '1').encode('latin-1', 'ignore').strip())
            num=int(request.POST.get('num', '10').encode('latin-1', 'ignore').strip())

            domain_data=models.DomainInfo.objects.values()[(page-1)*num:page*num]
            #遍历将每个实例的domain_id进行组合url重新赋值，url部分对应dns相关的处理函数
            for item in domain_data:
                item['domain_id'] = '<a href="/dns/dnsinfo.html?dns_id='+str(item['id'])+'">'+item['domain_id']+'</a>'


            #搜索模块
            
            if tj=="":
                total = models.DomainInfo.objects.count()
                data="{\"rows\":"+json.dumps(list(domain_data))+",\"total\":\""+str(total)+"\"}"
                return HttpResponse(data)
            else:
                rearch_data = models.DomainInfo.objects.filter(
                    Q(domain_id__contains=str(tj)) | Q(domain_name__contains=str(tj)) | Q(domain_remark__contains=str(tj)))
                total = rearch_data.count()
                data="{\"rows\":"+json.dumps(list(rearch_data.values()))+",\"total\":\""+str(total)+"\"}"
                return HttpResponse(data)
            
        elif action == 'editFun':#增加和删除，依据域名ID的唯一性
            domain_id = request.POST.get('domain_id', '').encode('latin-1', 'ignore').strip()
            domain_status = request.POST.get('domain_status', '').encode('latin-1', 'ignore').strip()
            domain_name = request.POST.get('domain_name', '').encode('latin-1', 'ignore').strip()
            domain_records = request.POST.get('domain_records', '').encode('latin-1', 'ignore').strip()
            domain_remark = request.POST.get('domain_remark', '').encode('latin-1', 'ignore').strip()

            domain_dict = {'domain_id':domain_id,
                        'domain_status':domain_status,
                        'domain_name':domain_name,
                        'domain_records':domain_records,
                        'domain_remark':domain_remark,}

            DomainUpdate = models.DomainInfo.objects.filter(domain_id=domain_id)

            try:
                if DomainUpdate:
                    DomainUpdate.update(**domain_dict)
                else:
                    models.DomainInfo.objects.create(**domain_dict)
            except :return HttpResponse('0')
            else:return HttpResponse('1')

        elif action == 'deleteFun':
            id = request.POST.get('id','').encode('latin-1', 'ignore').strip().split(',')
            try:
                for i in range(len(id)):
                    models.DomainInfo.objects.get(id=id[i]).delete()
            except Exception, e:
                pass
            else:
                return HttpResponse('1')

        elif action == 'sync' and request.user.has_perm('delete_contenttype'):
            CMD="curl -sX POST https://dnsapi.cn/Domain.List -d 'login_token=16080,94a8f63fc836d76ceb76ab4cdb36ee78&format=json'"
            raw_data=commands.getoutput(CMD)
            req=json.loads(raw_data)
            ret={}

            for i in range(len(req['domains'])):
                DD={'domain_id':req['domains'][i]['id'],'domain_status':req['domains'][i]['status'],'domain_name':req['domains'][i]['name'],'domain_records':req['domains'][i]['records'],'domain_remark':req['domains'][i]['remark'],}

                try:
                    objects, created = models.DomainInfo.objects.update_or_create(domain_id=DD['domain_id'],defaults=DD)
                    flag=('created' if created else 'updated')
                except Exception as e:
                    flag=e
                ret[str(DD['domain_id'])]=DD['domain_name'],flag

            delret={}
            for j in models.DomainInfo.objects.all():
                if not ret.has_key(j.domain_id):
                    models.DomainInfo.objects.filter(domain_id=j.domain_id).delete()
                    delret[j.domain_id]=j.domain_name,'deleted'

            result=dict(ret, **delret)

            return HttpResponse(json.dumps(result))

        else:return HttpResponse(x_message)
    elif dbname == 'dnsinfo':
        if action == 'pagedataList':
            #此时的base_id=domian_id
            tj=Vre(request.POST.get('tj', ''))
            page=int(request.POST.get('page', '1').encode('latin-1', 'ignore').strip())
            num=int(request.POST.get('num', '15').encode('latin-1', 'ignore').strip())

            #翻页数据
            #这里判断base_id是否为空，为空展示全部，不为空则使得DnsInfo表的外键关联Domain_name_id字段等于Domain函数传递过来的base_id值即可
            if base_id =='':domain_data=models.DnsInfo.objects.values()[(page-1)*num:page*num]
            else:domain_data = models.DnsInfo.objects.filter(Domain_name_id=base_id).values()[(page-1)*num:page*num]

            #获取所有的domain的列表
            domainlist = models.DomainInfo.objects.values()
            
            #查找数据
            if tj=="":
                total = models.DnsInfo.objects.count()
                data="{\"rows\":"+json.dumps(list(domain_data))+",\"total\":\""+str(total)+"\",\"domainlist\":"+json.dumps(list(domainlist))+"}"
                return HttpResponse(data)
            else:
                rearch_data = models.DnsInfo.objects.filter(
                    Q(dns_id__contains=str(tj)) | Q(dns_name__contains=str(tj)) | Q(record__contains=str(tj)) | Q(remark__contains=str(tj)) | Q(dnsop__contains=str(tj)))
                total = rearch_data.count()
                data="{\"rows\":"+json.dumps(list(rearch_data.values()))+",\"total\":\""+str(total)+"\",\"domainlist\":"+json.dumps(list(domainlist))+"}"
                return HttpResponse(data)

        elif action == 'editFun':
            dns_id = request.POST.get('dns_id', '')
            # Domain_name_id = models.DomainInfo.objects.get(dnsinfo__dns_id=str(dns_id)).id#取出此dns所属的domain ID
            dns_name = request.POST.get('dns_name', '')
            r_type = request.POST.get('r_type', '')
            l_type = request.POST.get('l_type', '')
            record = request.POST.get('record', '')
            priority = request.POST.get('priority', '')
            mx_priority = request.POST.get('mx_priority', '')
            ttl = request.POST.get('ttl', '')
            is_enabled = request.POST.get('is_enabled', '')
            status = request.POST.get('status', '')
            remark = request.POST.get('remark', '')
            updated_on = request.POST.get('updated_on', '')
            dnsop = request.POST.get('dnsop', '')
            Domain_name_id = request.POST.get('Domain_name_id', '').encode('latin-1', 'ignore').strip()


            dns_dict = {'dns_id':dns_id,
                        'dns_name':dns_name,
                        'r_type':r_type,
                        'l_type':l_type,
                        'record':record,
                        'priority':priority,
                        'mx_priority':mx_priority,
                        'ttl':ttl,
                        'is_enabled':is_enabled,
                        'status':status,
                        'updated_on':updated_on,
                        'dnsop':dnsop,
                        'remark':remark,
                        'Domain_name_id':str(Domain_name_id),
                        }

            DnsUpdate_dnsid = models.DnsInfo.objects.filter(dns_id=dns_id)
            DnsUpdate_Domainid = models.DomainInfo.objects.filter(id=str(Domain_name_id))

            try:
                if DnsUpdate_dnsid:
                    if DnsUpdate_Domainid:#如果dns记录与父记录（domain）都存在，即代表dns数据存在，更新即可
                        DnsUpdate_dnsid.update(**dns_dict)
                    else:return HttpResponse('域名不存在,请选择正确的域名信息')
                else:
                    if DnsUpdate_Domainid:#如果dns id不存在，但是domain）存在，创建数据
                        models.DnsInfo.objects.create(**dns_dict)
                    else:return HttpResponse('域名不存在,请选择正确的域名信息')
            except Exception as e :return HttpResponse(e)
            else:return HttpResponse('1')  

        elif action == 'deleteFun':
            id = request.POST.get('id','').encode('latin-1', 'ignore').strip().split(',')
            try:
                for i in range(len(id)):
                    models.DnsInfo.objects.get(id=id[i]).delete()
            except Exception, e:
                pass
            else:
                return HttpResponse('1')
        else:return HttpResponse(x_message)



    else:return HttpResponse(x_message)

data_dict = {
    'baseinfo':
        {'tablesname':models.BaseInfo,'field':['sid','hostname','isp','status','create_date','expire_date','admin','business_unit','tags','memo',]},
    'configinfo':
        {'tablesname':models.ConfigInfo,'field':['baseid','cpu_info','men_info','disk_info','os','public_ip','private_ip','mgmt_ip',]},
    'businessinfo':
        {'tablesname':models.BusinessUnit,'field':['name','admin','memo',]},
    'platforminfo':
        {'tablesname':models.Platform,'field':['name','domain','url','phonecall','memo',]},
    'domaininfo':
        {'tablesname':models.DomainInfo,'field':['domain_id','domain_status','domain_name','domain_records','domain_remark',]},
    'dnsinfo':
        {'tablesname':models.DnsInfo,'field':['Domain_name','dns_id','dns_name','r_type','l_type','record','priority','mx_priority','ttl','is_enabled','status','remark','updated_on','dnsop',]},
}


@login_required
@require_POST
@permission_required('add_contenttype')
def base_data(request):
    x_message=request.session.get('x_message',"您的请求已被拦截05！")
    if len(request.get_full_path().lstrip('/').strip().split('/')[1].split('_')) < 2:
        return HttpResponse(x_message)
    dbname=request.get_full_path().lstrip('/').strip().split('/')[1].split('_')[0]
    #dbname可能等于domaininfo,dnsinfo两种，后续还会加上baseinfo，configinfo等
    action=request.get_full_path().lstrip('/').strip().split('/')[1].split('_')[1]
    #action可能等于pagedataList,editFun,deleteFun,sync四种,即增删改查与同步
    tj=Vre(request.POST.get('tj', ''))
    page=int(request.POST.get('page', '1').encode('latin-1', 'ignore').strip())
    num=int(request.POST.get('num', '10').encode('latin-1', 'ignore').strip())

    if data_dict.has_key(dbname):
        tablename = data_dict[dbname]['tablesname']
        if action == 'pagedataList':#执行所有表的查询
            # tablename = data_dict[dbname]['tablesname']
            result_data = tablename.objects.values().order_by('-id')[(page-1)*num:page*num]
            platformlist = models.Platform.objects.values()#云平台列表
            businessunitlist = models.BusinessUnit.objects.values()#业务线列表
            baseinfolist = models.BaseInfo.objects.values()#云资源列表
            if tj == '':
                if dbname == 'baseinfo':
                    for item in result_data:
                        PlatformQueset= models.Platform.objects.filter(id=item['isp_id'])
                        for Platname in PlatformQueset:item['isp'] = Platname.name
                        #根据baseinfo表中id号去关联关系中取对应的业务线
                        base_obj = models.BaseInfo.objects.get(id=item['id'])
                        #base_obj.business_unit.all()
                        businessline=""
                        for line in base_obj.business_unit.all():businessline+=line.name+','
                        item['business_unit'] = businessline
                        item['sid'] = '<a href="/info/hostconfig.html?config_id='+str(item['id'])+'">'+item['sid']+'</a>'
                elif dbname == 'configinfo':
                    for item in result_data:
                        BaseQueset = models.BaseInfo.objects.filter(id=item['baseid_id'])
                        for basename in BaseQueset:item['baseid'] = basename.sid   
                    if base_id:result_data=tablename.objects.filter(baseid_id=base_id).values()[(page-1)*num:page*num]
                    else:pass
                else:pass
                total = tablename.objects.count()
                data="{\"rows\":"+json.dumps(list(result_data),cls=CJsonEncoder)+",\"total\":\""+str(total)+"\",\"platformlist\":" \
                +json.dumps(list(platformlist),cls=CJsonEncoder)+",\"businessunitlist\":"+json.dumps(list(businessunitlist),cls=CJsonEncoder)+",\"baseinfolist\":" \
                +json.dumps(list(baseinfolist),cls=CJsonEncoder)+"}"
                # return HttpResponse(data)
            else:
                if dbname == 'baseinfo':
                    rearch_data = models.BaseInfo.objects.filter(Q(business_unit__name__contains=str(tj)) |Q(isp__name__contains=str(tj)) \
                        | Q(sid__contains=str(tj)) | Q(hostname__contains=str(tj)) | Q(admin__contains=str(tj)) | Q(tags__contains=str(tj))\
                        | Q(memo__contains=str(tj))).values().order_by('-id')
                    
                    for item in rearch_data:
                        PlatformQueset= models.Platform.objects.filter(id=item['isp_id'])
                        for Platname in PlatformQueset:item['isp'] = Platname.name
                        # 根据baseinfo表中id号去关联关系中取对应的业务线
                        base_obj = models.BaseInfo.objects.get(id=item['id'])
                        # base_obj.business_unit.all()
                        businessline=""
                        for line in base_obj.business_unit.all():businessline+=line.name+','
                        item['business_unit'] = businessline
                        item['sid'] = '<a href="/info/hostconfig.html?config_id='+str(item['id'])+'">'+item['sid']+'</a>'
                elif dbname == 'configinfo':
                    rearch_data = models.ConfigInfo.objects.filter(Q(baseid__sid__contains=str(tj)) | Q(cpu_info__contains=str(tj)) \
                        | Q(men_info__contains=str(tj)) | Q(disk_info__contains=str(tj)) | Q(os__contains=str(tj)) \
                        | Q(public_ip__contains=str(tj))| Q(private_ip__contains=str(tj))| Q(mgmt_ip__contains=str(tj)) \
                        | Q(memo__contains=str(tj))).values().order_by('-id')

                    for item in result_data:
                        BaseQueset = models.BaseInfo.objects.filter(id=item['baseid_id'])
                        for basename in BaseQueset:item['baseid'] = basename.sid
                elif dbname == 'platforminfo':
                    rearch_data = tablename.objects.filter(Q(name__contains=str(tj)) | Q(domain__contains=str(tj)) | Q(url__contains=str(tj)) \
                        | Q(phonecall__contains=str(tj))| Q(memo__contains=str(tj))).values().order_by('-id')
                elif dbname == 'businessinfo':
                    rearch_data = tablename.objects.filter(Q(name__contains=str(tj)) | Q(admin__contains=str(tj))| Q(memo__contains=str(tj))).values().order_by('-id') 
                total = rearch_data.count()
                data="{\"rows\":"+json.dumps(list(rearch_data),cls=CJsonEncoder)+",\"total\":\""+str(total)+"\"}"
                # return HttpResponse(data)
            return HttpResponse(data)

        elif action == 'editFun':#执行所有的编辑与修改
            #平台配置新增与修改
            if dbname == 'platforminfo':
                name = request.POST.get('name', '')
                domain = request.POST.get('domain', '')
                url = request.POST.get('url', '')
                phonecall = request.POST.get('phonecall', '')
                memo = request.POST.get('memo', '')


                plat_dict = {'name':name,
                            'domain':domain,
                            'url':url,
                            'phonecall':phonecall,
                            'memo':memo,
                            }

                PlatUpdate = models.Platform.objects.filter(name=name)
                try:
                    if PlatUpdate:PlatUpdate.update(**plat_dict)
                    else:models.Platform.objects.create(**plat_dict)
                except Exception as e :return HttpResponse(e)
                else:return HttpResponse('1')

            #执行业务线新增与修改
            elif dbname == 'businessinfo':
                name = request.POST.get('name', '')
                admin = request.POST.get('admin', '')
                memo = request.POST.get('memo', '')

                business_dict = {'name':name,
                            'admin':admin,
                            'memo':memo,
                            }

                BusinessUpdate = models.BusinessUnit.objects.filter(name=name)
                try:
                    if BusinessUpdate:BusinessUpdate.update(**business_dict)
                    else:models.BusinessUnit.objects.create(**business_dict)
                except Exception as e :return HttpResponse(e)
                else:return HttpResponse('1')
            
            #执行云资源新增与修改   
            elif dbname == 'baseinfo':
                sid = request.POST.get('sid', '')
                hostname = request.POST.get('hostname', '')
                isp = request.POST.get('isp_id', '').encode('latin-1', 'ignore').strip()
                status = request.POST.get('status', '')
                create_date = request.POST.get('create_date', '')
                expire_date = request.POST.get('expire_date', '')
                admin = request.POST.get('admin', '')
                business_unit = request.POST.get('business_unit', '').encode('latin-1', 'ignore').strip().split(',')
                tags = request.POST.get('tags', '')
                memo = request.POST.get('memo', '')
                
                isp_choice = models.Platform.objects.get(id=int(isp))

                base_dict = {'sid':sid,
                            'hostname':hostname,
                            'isp':isp_choice,
                            'status':status,
                            'create_date':create_date,
                            'expire_date':expire_date,
                            'admin':admin,
                            'tags':tags,
                            'memo':memo,
                            }

                baseinfoUpdate = models.BaseInfo.objects.filter(sid=sid)
                              
                try:
                    if baseinfoUpdate:baseinfoUpdate.update(**base_dict)                   
                    else:models.BaseInfo.objects.create(**base_dict)#创建不含多对多的记录

                    #业务线修改通过先删除，后新增的方式实现
                    base_obj =models.BaseInfo.objects.get(sid=base_dict['sid'])#获取该记录
                    bussiness_obj_del = models.BusinessUnit.objects.all()
                    base_obj.business_unit.remove(*bussiness_obj_del)
                    for i in range(len(business_unit)):
                        bussid = business_unit[i]
                        bussiness_obj = models.BusinessUnit.objects.filter(id=bussid)#获取业务线queryset
                        base_obj.business_unit.add(*bussiness_obj)#关联该对象

                except Exception as e :return HttpResponse(e)
                else:return HttpResponse('1')               

            #执行配置信息新增与修改
            elif dbname == 'configinfo':
                baseid = request.POST.get('baseid', '').encode('latin-1', 'ignore').strip()
                cpu_info = request.POST.get('cpu_info', '')
                men_info = request.POST.get('men_info', '')
                disk_info = request.POST.get('disk_info', '')
                os = request.POST.get('os', '')
                public_ip = request.POST.get('public_ip', '')
                private_ip = request.POST.get('private_ip', '')
                mgmt_ip = request.POST.get('mgmt_ip', '')
                memo = request.POST.get('memo', '')

                base_choice = models.BaseInfo.objects.get(id=int(baseid))

                config_dict = {
                            'baseid':base_choice,
                            'cpu_info':cpu_info,
                            'men_info':men_info,
                            'disk_info':disk_info,
                            'os':os,
                            'public_ip':public_ip,
                            'private_ip':private_ip,
                            'mgmt_ip':mgmt_ip,
                            'memo':memo
                            }

                ConfigUpdate = models.ConfigInfo.objects.filter(baseid=baseid,public_ip=public_ip)
                try:
                    if ConfigUpdate:ConfigUpdate.update(**config_dict)
                    else:models.ConfigInfo.objects.create(**config_dict)
                except Exception as e :return HttpResponse(e)
                else:return HttpResponse('1')
            else:pass

        elif action == 'deleteFun':#执行所有的删除
            id = request.POST.get('id','').encode('latin-1', 'ignore').strip().split(',')
            try:
                for i in range(len(id)):
                    tablename.objects.get(id=id[i]).delete()
            except Exception, e:
                pass
            else:
                return HttpResponse('1')

    else:pass



class TestView(TemplateView):
    template_name = 'test.html'

    

        



